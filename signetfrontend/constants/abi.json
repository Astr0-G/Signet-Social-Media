{
  "address": "0x4D68e403787842D2AC1a953696F320881b9401D7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Contract__Created",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creatoraddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionaddress",
          "type": "address"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STCrator",
      "outputs": [
        {
          "internalType": "contract Signetors",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TotalSignetorsNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectionContractList",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "controllorCreateSignetor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractOwner",
          "type": "address"
        }
      ],
      "name": "getOwnerContractForSignetor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractOwner",
          "type": "address"
        }
      ],
      "name": "getOwnerNumContractOfSignetor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sSignetor",
      "outputs": [
        {
          "internalType": "contract Signetor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        }
      ],
      "name": "sendmessage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f7ba931c324b7b418aa1f20f06bd1c9cefeb221dc38f6f58b818d230344d023",
  "receipt": {
    "to": null,
    "from": "0x2c1dE1af8a236aa0f1EA8B45D292139604Bc8FF2",
    "contractAddress": "0x4D68e403787842D2AC1a953696F320881b9401D7",
    "transactionIndex": 28,
    "gasUsed": "4865620",
    "logsBloom": "0x
    "blockHash": "0xb6407f0e2d53926703a884d9ae8a431623308a8cd916f20f3267234c80d45db6",
    "transactionHash": "0x9f7ba931c324b7b418aa1f20f06bd1c9cefeb221dc38f6f58b818d230344d023",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 7764292,
        "transactionHash": "0x9f7ba931c324b7b418aa1f20f06bd1c9cefeb221dc38f6f58b818d230344d023",
        "address": "0x4D68e403787842D2AC1a953696F320881b9401D7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002c1de1af8a236aa0f1ea8b45d292139604bc8ff2"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0xb6407f0e2d53926703a884d9ae8a431623308a8cd916f20f3267234c80d45db6"
      }
    ],
    "blockNumber": 7764292,
    "cumulativeGasUsed": "15732617",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e7fa2c777f0e75ddc9b09fecf22f591d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Contract__Created\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatoraddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionaddress\",\"type\":\"address\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STCrator\",\"outputs\":[{\"internalType\":\"contract Signetors\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalSignetorsNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionContractList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"controllorCreateSignetor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"name\":\"getOwnerContractForSignetor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"name\":\"getOwnerNumContractOfSignetor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sSignetor\",\"outputs\":[{\"internalType\":\"contract Signetor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"sendmessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SignetControllor.sol\":\"SignetControllor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SignetControllor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Signetors.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title Signetors Controllor\\r\\n * @author astro\\r\\n */\\r\\nerror Contract__Created();\\r\\n\\r\\ncontract SignetControllor is ReentrancyGuard, Ownable {\\r\\n    Signetor public sSignetor;\\r\\n    Signetors ST;\\r\\n    Signetors public STCrator;\\r\\n    uint256 public TotalSignetorsNum;\\r\\n    struct ownerstruct {\\r\\n        address owner;\\r\\n    }\\r\\n    mapping(address => ownerstruct) public collectionContractList;\\r\\n    event CollectionCreated(address indexed creatoraddress, address indexed collectionaddress);\\r\\n\\r\\n    constructor() {\\r\\n        ST = new Signetors();\\r\\n        STCrator = Signetors(ST.ContractAddress());\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method creating collection.\\r\\n     * @param creating non-copyright collection.\\r\\n     * @param creating copyright collection.\\r\\n     * @param store all infos into contract.\\r\\n     */\\r\\n\\r\\n    function controllorCreateSignetor(string memory _name, string memory _symbol) external {\\r\\n        if (getOwnerNumContractOfSignetor(msg.sender) != 0) revert Contract__Created();\\r\\n        (, address b, ) = STCrator.createSignetor(_name, _symbol, msg.sender);\\r\\n        TotalSignetorsNum++;\\r\\n        ownerstruct memory OWS = ownerstruct(msg.sender);\\r\\n        collectionContractList[b] = OWS;\\r\\n        emit CollectionCreated(msg.sender, b);\\r\\n    }\\r\\n\\r\\n    function getOwnerContractForSignetor(address contractOwner) public view returns (address) {\\r\\n        (, address b, ) = STCrator.getresponse(0, contractOwner);\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    function getOwnerNumContractOfSignetor(address contractOwner) public view returns (uint256) {\\r\\n        uint256 a = STCrator.s_creatorCollection(contractOwner);\\r\\n        return (a);\\r\\n    }\\r\\n\\r\\n    function sendmessage(address addr, string memory tokenURI_) public returns (bool success) {\\r\\n        sSignetor = Signetor(addr);\\r\\n        sSignetor.sendmessage(tokenURI_);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa35469f757c444fc9741baa8c9d612290597a1b9252f634ab2c062415e5e1759\",\"license\":\"MIT\"},\"contracts/Signetor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Not__FromSignetControllors();\\n\\ncontract Signetor is ERC721, Ownable {\\n    address public SignetorContractAddress;\\n    address public SignetControllors;\\n    using Strings for uint256;\\n\\n    uint256 public token_Id;\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURIextended;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address owner,\\n        address signetControllors\\n    ) ERC721(_name, _symbol) {\\n        setAddress();\\n        transferOwnership(owner);\\n        SignetControllors = signetControllors;\\n    }\\n\\n    function setAddress() private {\\n        SignetorContractAddress = address(this);\\n    }\\n\\n    function setBaseURI(string memory baseURI_) external onlyOwner {\\n        _baseURIextended = baseURI_;\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseURIextended;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    function sendmessage(string memory tokenURI_) public {\\n        if (msg.sender != SignetControllors) revert Not__FromSignetControllors();\\n        token_Id++;\\n        address owneraddress = owner();\\n        _mint(owneraddress, token_Id);\\n        _setTokenURI(token_Id, tokenURI_);\\n    }\\n\\n    // function totalmessage() public view returns (uint256) {\\n    //     uint256 tmessage = totalSupply();\\n    //     return totalmessage;\\n    // }\\n}\\n\",\"keccak256\":\"0xf387e1653a1e85b28e654b46ffeff6be7d6e0bcc96fb930ea2cd1478bb9cc69f\",\"license\":\"MIT\"},\"contracts/Signetors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Signetor.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title Signetors Controllor\\r\\n * @author astro\\r\\n */\\r\\n\\r\\ncontract Signetors {\\r\\n    Signetor ST;\\r\\n    address public ControllorAddr;\\r\\n    address public ContractAddress;\\r\\n\\r\\n    struct creatorCollection {\\r\\n        uint256 numOfCollectionCreated;\\r\\n        crators[] collectionCreated;\\r\\n    }\\r\\n\\r\\n    struct crators {\\r\\n        address Creator;\\r\\n        address Contract;\\r\\n        uint8 collectiontype;\\r\\n    }\\r\\n\\r\\n    mapping(address => creatorCollection) public s_creatorCollection;\\r\\n\\r\\n    constructor() {\\r\\n        ControllorAddr = msg.sender;\\r\\n        setAddress();\\r\\n    }\\r\\n\\r\\n    modifier isControllor() {\\r\\n        ControllorAddr = msg.sender;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method for listing NFT\\r\\n     * @param nftAddress Address of NFT contract\\r\\n     * @param tokenId Token ID of NFT\\r\\n     * @param price sale price for each item\\r\\n     */\\r\\n    function setAddress() private {\\r\\n        ContractAddress = address(this);\\r\\n    }\\r\\n\\r\\n    function createSignetor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address crator\\r\\n    )\\r\\n        external\\r\\n        isControllor\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        address newContractAddress;\\r\\n        address creator;\\r\\n        ST = new Signetor(_name, _symbol, crator, ControllorAddr);\\r\\n        newContractAddress = ST.SignetorContractAddress();\\r\\n        creator = crator;\\r\\n        s_creatorCollection[crator].numOfCollectionCreated++;\\r\\n        crators memory Crators = crators(crator, newContractAddress, 1);\\r\\n        s_creatorCollection[crator].collectionCreated.push(Crators);\\r\\n        return (creator, newContractAddress, 1);\\r\\n    }\\r\\n\\r\\n    function getresponse(uint256 noOfContract, address contractOwner)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        address a = s_creatorCollection[contractOwner].collectionCreated[noOfContract].Creator;\\r\\n        address b = s_creatorCollection[contractOwner].collectionCreated[noOfContract].Contract;\\r\\n        uint256 c = s_creatorCollection[contractOwner]\\r\\n            .collectionCreated[noOfContract]\\r\\n            .collectiontype;\\r\\n        return (a, b, c);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f8aa42abe20619d9e72277cbfba369d96ae781f4a26a45d2b6900bf0952d530\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060016000819055506200003a6200002e6200018060201b60201c565b6200018860201b60201c565b60405162000048906200024e565b604051809103906000f08015801562000065573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366d11c1a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620002c6565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002f8565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61440080620013d783390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028e8262000261565b9050919050565b620002a08162000281565b8114620002ac57600080fd5b50565b600081519050620002c08162000295565b92915050565b600060208284031215620002df57620002de6200025c565b5b6000620002ef84828501620002af565b91505092915050565b6110cf80620003086000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638a68b229116100715780638a68b229146101525780638da5cb5b146101705780639679a3c81461018e5780639f71d03c146101be578063d8fb768b146101ee578063f2fde38b1461020c576100a9565b80632ff1f928146100ae5780633958b30f146100cc5780635a9eb289146100e8578063715018a6146101185780638143c1f514610122575b600080fd5b6100b6610228565b6040516100c3919061098c565b60405180910390f35b6100e660048036038101906100e19190610b01565b61024e565b005b61010260048036038101906100fd9190610bb7565b610463565b60405161010f9190610c2e565b60405180910390f35b61012061053d565b005b61013c60048036038101906101379190610c49565b610551565b6040516101499190610c8f565b60405180910390f35b61015a6105fb565b6040516101679190610ccb565b60405180910390f35b610178610621565b6040516101859190610cf5565b60405180910390f35b6101a860048036038101906101a39190610c49565b61064b565b6040516101b59190610cf5565b60405180910390f35b6101d860048036038101906101d39190610c49565b6106fa565b6040516101e59190610cf5565b60405180910390f35b6101f6610738565b6040516102039190610c8f565b60405180910390f35b61022660048036038101906102219190610c49565b61073e565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061025933610551565b14610290576040517f43d73cc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632bb85f6b8484336040518463ffffffff1660e01b81526004016102f193929190610d98565b6060604051808303816000875af1158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610e1e565b509150506005600081548092919061034b90610ea0565b9190505550600060405180602001604052803373ffffffffffffffffffffffffffffffffffffffff16815250905080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5d0de243db1669e3a7056744cd715c625f0c1c348736c2c2d53d0ddebff1a6c760405160405180910390a350505050565b600082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323cbe4d6836040518263ffffffff1660e01b81526004016105019190610ee8565b600060405180830381600087803b15801561051b57600080fd5b505af115801561052f573d6000803e3d6000fd5b505050506001905092915050565b6105456107c1565b61054f600061083f565b565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c284dc0846040518263ffffffff1660e01b81526004016105af9190610cf5565b602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610f0a565b905080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f7fd7ab6000856040518363ffffffff1660e01b81526004016106ac929190610f72565b606060405180830381865afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190610e1e565b5091505080915050919050565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b60055481565b6107466107c1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac9061100d565b60405180910390fd5b6107be8161083f565b50565b6107c9610905565b73ffffffffffffffffffffffffffffffffffffffff166107e7610621565b73ffffffffffffffffffffffffffffffffffffffff161461083d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083490611079565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061095261094d6109488461090d565b61092d565b61090d565b9050919050565b600061096482610937565b9050919050565b600061097682610959565b9050919050565b6109868161096b565b82525050565b60006020820190506109a1600083018461097d565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a0e826109c5565b810181811067ffffffffffffffff82111715610a2d57610a2c6109d6565b5b80604052505050565b6000610a406109a7565b9050610a4c8282610a05565b919050565b600067ffffffffffffffff821115610a6c57610a6b6109d6565b5b610a75826109c5565b9050602081019050919050565b82818337600083830152505050565b6000610aa4610a9f84610a51565b610a36565b905082815260208101848484011115610ac057610abf6109c0565b5b610acb848285610a82565b509392505050565b600082601f830112610ae857610ae76109bb565b5b8135610af8848260208601610a91565b91505092915050565b60008060408385031215610b1857610b176109b1565b5b600083013567ffffffffffffffff811115610b3657610b356109b6565b5b610b4285828601610ad3565b925050602083013567ffffffffffffffff811115610b6357610b626109b6565b5b610b6f85828601610ad3565b9150509250929050565b6000610b848261090d565b9050919050565b610b9481610b79565b8114610b9f57600080fd5b50565b600081359050610bb181610b8b565b92915050565b60008060408385031215610bce57610bcd6109b1565b5b6000610bdc85828601610ba2565b925050602083013567ffffffffffffffff811115610bfd57610bfc6109b6565b5b610c0985828601610ad3565b9150509250929050565b60008115159050919050565b610c2881610c13565b82525050565b6000602082019050610c436000830184610c1f565b92915050565b600060208284031215610c5f57610c5e6109b1565b5b6000610c6d84828501610ba2565b91505092915050565b6000819050919050565b610c8981610c76565b82525050565b6000602082019050610ca46000830184610c80565b92915050565b6000610cb582610959565b9050919050565b610cc581610caa565b82525050565b6000602082019050610ce06000830184610cbc565b92915050565b610cef81610b79565b82525050565b6000602082019050610d0a6000830184610ce6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d4a578082015181840152602081019050610d2f565b83811115610d59576000848401525b50505050565b6000610d6a82610d10565b610d748185610d1b565b9350610d84818560208601610d2c565b610d8d816109c5565b840191505092915050565b60006060820190508181036000830152610db28186610d5f565b90508181036020830152610dc68185610d5f565b9050610dd56040830184610ce6565b949350505050565b600081519050610dec81610b8b565b92915050565b610dfb81610c76565b8114610e0657600080fd5b50565b600081519050610e1881610df2565b92915050565b600080600060608486031215610e3757610e366109b1565b5b6000610e4586828701610ddd565b9350506020610e5686828701610ddd565b9250506040610e6786828701610e09565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eab82610c76565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610edd57610edc610e71565b5b600182019050919050565b60006020820190508181036000830152610f028184610d5f565b905092915050565b600060208284031215610f2057610f1f6109b1565b5b6000610f2e84828501610e09565b91505092915050565b6000819050919050565b6000610f5c610f57610f5284610f37565b61092d565b610c76565b9050919050565b610f6c81610f41565b82525050565b6000604082019050610f876000830185610f63565b610f946020830184610ce6565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ff7602683610d1b565b915061100282610f9b565b604082019050919050565b6000602082019050818103600083015261102681610fea565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611063602083610d1b565b915061106e8261102d565b602082019050919050565b6000602082019050818103600083015261109281611056565b905091905056fea2646970667358221220d1c5c0664618971dab51f792534dcff20c5cc7b513030990ccd10a0906d5717064736f6c634300080e0033608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061006061006560201b60201c565b6100a8565b30600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b614349806100b76000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80632bb85f6b14620000635780632cc0a402146200009b5780635c284dc014620000bd57806366d11c1a14620000f35780636f7fd7ab1462000115575b600080fd5b6200008160048036038101906200007b9190620008aa565b6200014d565b604051620000929392919062000970565b60405180910390f35b620000a5620004a9565b604051620000b49190620009ad565b60405180910390f35b620000db6004803603810190620000d59190620009ca565b620004cf565b604051620000ea9190620009fc565b60405180910390f35b620000fd620004ed565b6040516200010c9190620009ad565b60405180910390f35b6200013360048036038101906200012d919062000a4a565b62000513565b604051620001449392919062000970565b60405180910390f35b600080600033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080878787600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051620001ca90620006c1565b620001d9949392919062000b24565b604051809103906000f080158015620001f6573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffb0958d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c8919062000b96565b9150859050600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000815480929190620003229062000bf7565b9190505550600060405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600160ff168152509050600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360ff16021790555050508183600195509550955050505093509350939050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000154905081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101868154811062000570576200056f62000c44565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018781548110620005fd57620005fc62000c44565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010188815481106200068a576200068962000c44565b5b906000526020600020906002020160010160149054906101000a900460ff1660ff1690508282829550955095505050509250925092565b6136a08062000c7483390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200073882620006ed565b810181811067ffffffffffffffff821117156200075a5762000759620006fe565b5b80604052505050565b60006200076f620006cf565b90506200077d82826200072d565b919050565b600067ffffffffffffffff821115620007a0576200079f620006fe565b5b620007ab82620006ed565b9050602081019050919050565b82818337600083830152505050565b6000620007de620007d88462000782565b62000763565b905082815260208101848484011115620007fd57620007fc620006e8565b5b6200080a848285620007b8565b509392505050565b600082601f8301126200082a5762000829620006e3565b5b81356200083c848260208601620007c7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008728262000845565b9050919050565b620008848162000865565b81146200089057600080fd5b50565b600081359050620008a48162000879565b92915050565b600080600060608486031215620008c657620008c5620006d9565b5b600084013567ffffffffffffffff811115620008e757620008e6620006de565b5b620008f58682870162000812565b935050602084013567ffffffffffffffff811115620009195762000918620006de565b5b620009278682870162000812565b92505060406200093a8682870162000893565b9150509250925092565b6200094f8162000865565b82525050565b6000819050919050565b6200096a8162000955565b82525050565b600060608201905062000987600083018662000944565b62000996602083018562000944565b620009a560408301846200095f565b949350505050565b6000602082019050620009c4600083018462000944565b92915050565b600060208284031215620009e357620009e2620006d9565b5b6000620009f38482850162000893565b91505092915050565b600060208201905062000a1360008301846200095f565b92915050565b62000a248162000955565b811462000a3057600080fd5b50565b60008135905062000a448162000a19565b92915050565b6000806040838503121562000a645762000a63620006d9565b5b600062000a748582860162000a33565b925050602062000a878582860162000893565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000acd57808201518184015260208101905062000ab0565b8381111562000add576000848401525b50505050565b600062000af08262000a91565b62000afc818562000a9c565b935062000b0e81856020860162000aad565b62000b1981620006ed565b840191505092915050565b6000608082019050818103600083015262000b40818762000ae3565b9050818103602083015262000b56818662000ae3565b905062000b67604083018562000944565b62000b76606083018462000944565b95945050505050565b60008151905062000b908162000879565b92915050565b60006020828403121562000baf5762000bae620006d9565b5b600062000bbf8482850162000b7f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000c048262000955565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000c395762000c3862000bc8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe60806040523480156200001157600080fd5b50604051620036a0380380620036a083398181016040528101906200003791906200060d565b83838160009080519060200190620000519291906200035b565b5080600190805190602001906200006a9291906200035b565b5050506200008d62000081620000f960201b60201c565b6200010160201b60201c565b6200009d620001c760201b60201c565b620000ae826200020a60201b60201c565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200083c565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b30600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6200021a620002a060201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200028c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002839062000744565b60405180910390fd5b6200029d816200010160201b60201c565b50565b620002b0620000f960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002d66200033160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200032f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200032690620007b6565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620003699062000807565b90600052602060002090601f0160209004810192826200038d5760008555620003d9565b82601f10620003a857805160ff1916838001178555620003d9565b82800160010185558215620003d9579182015b82811115620003d8578251825591602001919060010190620003bb565b5b509050620003e89190620003ec565b5090565b5b8082111562000407576000816000905550600101620003ed565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004748262000429565b810181811067ffffffffffffffff821117156200049657620004956200043a565b5b80604052505050565b6000620004ab6200040b565b9050620004b9828262000469565b919050565b600067ffffffffffffffff821115620004dc57620004db6200043a565b5b620004e78262000429565b9050602081019050919050565b60005b8381101562000514578082015181840152602081019050620004f7565b8381111562000524576000848401525b50505050565b6000620005416200053b84620004be565b6200049f565b90508281526020810184848401111562000560576200055f62000424565b5b6200056d848285620004f4565b509392505050565b600082601f8301126200058d576200058c6200041f565b5b81516200059f8482602086016200052a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005d582620005a8565b9050919050565b620005e781620005c8565b8114620005f357600080fd5b50565b6000815190506200060781620005dc565b92915050565b600080600080608085870312156200062a576200062962000415565b5b600085015167ffffffffffffffff8111156200064b576200064a6200041a565b5b620006598782880162000575565b945050602085015167ffffffffffffffff8111156200067d576200067c6200041a565b5b6200068b8782880162000575565b93505060406200069e87828801620005f6565b9250506060620006b187828801620005f6565b91505092959194509250565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200072c602683620006bd565b91506200073982620006ce565b604082019050919050565b600060208201905081810360008301526200075f816200071d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200079e602083620006bd565b9150620007ab8262000766565b602082019050919050565b60006020820190508181036000830152620007d1816200078f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200082057607f821691505b602082108103620008365762000835620007d8565b5b50919050565b612e54806200084c6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806370a08231116100b8578063a22cb4651161007c578063a22cb46514610327578063b88d4fde14610343578063c87b56dd1461035f578063e985e9c51461038f578063f2fde38b146103bf578063ffb0958d146103db57610136565b806370a0823114610293578063715018a6146102c35780638da5cb5b146102cd57806395d89b41146102eb578063975073ba1461030957610136565b806323b872dd116100ff57806323b872dd146101f357806323cbe4d61461020f57806342842e0e1461022b57806355f804b3146102475780636352211e1461026357610136565b806204586c1461013b57806301ffc9a71461015957806306fdde0314610189578063081812fc146101a7578063095ea7b3146101d7575b600080fd5b6101436103f9565b6040516101509190611c56565b60405180910390f35b610173600480360381019061016e9190611cdd565b6103ff565b6040516101809190611d25565b60405180910390f35b6101916104e1565b60405161019e9190611dd9565b60405180910390f35b6101c160048036038101906101bc9190611e27565b610573565b6040516101ce9190611e95565b60405180910390f35b6101f160048036038101906101ec9190611edc565b6105b9565b005b61020d60048036038101906102089190611f1c565b6106d0565b005b610229600480360381019061022491906120a4565b610730565b005b61024560048036038101906102409190611f1c565b6107f7565b005b610261600480360381019061025c91906120a4565b610817565b005b61027d60048036038101906102789190611e27565b610839565b60405161028a9190611e95565b60405180910390f35b6102ad60048036038101906102a891906120ed565b6108ea565b6040516102ba9190611c56565b60405180910390f35b6102cb6109a1565b005b6102d56109b5565b6040516102e29190611e95565b60405180910390f35b6102f36109df565b6040516103009190611dd9565b60405180910390f35b610311610a71565b60405161031e9190611e95565b60405180910390f35b610341600480360381019061033c9190612146565b610a97565b005b61035d60048036038101906103589190612227565b610aad565b005b61037960048036038101906103749190611e27565b610b0f565b6040516103869190611dd9565b60405180910390f35b6103a960048036038101906103a491906122aa565b610c81565b6040516103b69190611d25565b60405180910390f35b6103d960048036038101906103d491906120ed565b610d15565b005b6103e3610d98565b6040516103f09190611e95565b60405180910390f35b60095481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ca57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104da57506104d982610dbe565b5b9050919050565b6060600080546104f090612319565b80601f016020809104026020016040519081016040528092919081815260200182805461051c90612319565b80156105695780601f1061053e57610100808354040283529160200191610569565b820191906000526020600020905b81548152906001019060200180831161054c57829003601f168201915b5050505050905090565b600061057e82610e28565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105c482610839565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906123bc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610653610e73565b73ffffffffffffffffffffffffffffffffffffffff16148061068257506106818161067c610e73565b610c81565b5b6106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b89061244e565b60405180910390fd5b6106cb8383610e7b565b505050565b6106e16106db610e73565b82610f34565b610720576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610717906124e0565b60405180910390fd5b61072b838383610fc9565b505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b7576040517f3cfd317500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600960008154809291906107ca9061252f565b919050555060006107d96109b5565b90506107e78160095461122f565b6107f360095483611408565b5050565b61081283838360405180602001604052806000815250610aad565b505050565b61081f61147c565b80600b9080519060200190610835929190611b9a565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d8906125c3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190612655565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109a961147c565b6109b360006114fa565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109ee90612319565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1a90612319565b8015610a675780601f10610a3c57610100808354040283529160200191610a67565b820191906000526020600020905b815481529060010190602001808311610a4a57829003601f168201915b5050505050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610aa9610aa2610e73565b83836115c0565b5050565b610abe610ab8610e73565b83610f34565b610afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af4906124e0565b60405180910390fd5b610b098484848461172c565b50505050565b6060610b1a82611788565b610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b50906126e7565b60405180910390fd5b6000600a60008481526020019081526020016000208054610b7990612319565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba590612319565b8015610bf25780601f10610bc757610100808354040283529160200191610bf2565b820191906000526020600020905b815481529060010190602001808311610bd557829003601f168201915b505050505090506000610c036117f4565b90506000815103610c18578192505050610c7c565b600082511115610c4d578082604051602001610c35929190612743565b60405160208183030381529060405292505050610c7c565b80610c5785611886565b604051602001610c68929190612743565b604051602081830303815290604052925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d1d61147c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d83906127d9565b60405180910390fd5b610d95816114fa565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610e3181611788565b610e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e67906125c3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610eee83610839565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f4083610839565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f825750610f818185610c81565b5b80610fc057508373ffffffffffffffffffffffffffffffffffffffff16610fa884610573565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610fe982610839565b73ffffffffffffffffffffffffffffffffffffffff161461103f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110369061286b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a5906128fd565b60405180910390fd5b6110b98383836119e6565b6110c4600082610e7b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611114919061291d565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461116b9190612951565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461122a8383836119eb565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361129e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611295906129f3565b60405180910390fd5b6112a781611788565b156112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de90612a5f565b60405180910390fd5b6112f3600083836119e6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113439190612951565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611404600083836119eb565b5050565b61141182611788565b611450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144790612af1565b60405180910390fd5b80600a60008481526020019081526020016000209080519060200190611477929190611b9a565b505050565b611484610e73565b73ffffffffffffffffffffffffffffffffffffffff166114a26109b5565b73ffffffffffffffffffffffffffffffffffffffff16146114f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ef90612b5d565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361162e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162590612bc9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171f9190611d25565b60405180910390a3505050565b611737848484610fc9565b611743848484846119f0565b611782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177990612c5b565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600b805461180390612319565b80601f016020809104026020016040519081016040528092919081815260200182805461182f90612319565b801561187c5780601f106118515761010080835404028352916020019161187c565b820191906000526020600020905b81548152906001019060200180831161185f57829003601f168201915b5050505050905090565b6060600082036118cd576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119e1565b600082905060005b600082146118ff5780806118e89061252f565b915050600a826118f89190612caa565b91506118d5565b60008167ffffffffffffffff81111561191b5761191a611f79565b5b6040519080825280601f01601f19166020018201604052801561194d5781602001600182028036833780820191505090505b5090505b600085146119da57600182611966919061291d565b9150600a856119759190612cdb565b60306119819190612951565b60f81b81838151811061199757611996612d0c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119d39190612caa565b9450611951565b8093505050505b919050565b505050565b505050565b6000611a118473ffffffffffffffffffffffffffffffffffffffff16611b77565b15611b6a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a3a610e73565b8786866040518563ffffffff1660e01b8152600401611a5c9493929190612d90565b6020604051808303816000875af1925050508015611a9857506040513d601f19601f82011682018060405250810190611a959190612df1565b60015b611b1a573d8060008114611ac8576040519150601f19603f3d011682016040523d82523d6000602084013e611acd565b606091505b506000815103611b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0990612c5b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b6f565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611ba690612319565b90600052602060002090601f016020900481019282611bc85760008555611c0f565b82601f10611be157805160ff1916838001178555611c0f565b82800160010185558215611c0f579182015b82811115611c0e578251825591602001919060010190611bf3565b5b509050611c1c9190611c20565b5090565b5b80821115611c39576000816000905550600101611c21565b5090565b6000819050919050565b611c5081611c3d565b82525050565b6000602082019050611c6b6000830184611c47565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611cba81611c85565b8114611cc557600080fd5b50565b600081359050611cd781611cb1565b92915050565b600060208284031215611cf357611cf2611c7b565b5b6000611d0184828501611cc8565b91505092915050565b60008115159050919050565b611d1f81611d0a565b82525050565b6000602082019050611d3a6000830184611d16565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d7a578082015181840152602081019050611d5f565b83811115611d89576000848401525b50505050565b6000601f19601f8301169050919050565b6000611dab82611d40565b611db58185611d4b565b9350611dc5818560208601611d5c565b611dce81611d8f565b840191505092915050565b60006020820190508181036000830152611df38184611da0565b905092915050565b611e0481611c3d565b8114611e0f57600080fd5b50565b600081359050611e2181611dfb565b92915050565b600060208284031215611e3d57611e3c611c7b565b5b6000611e4b84828501611e12565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e7f82611e54565b9050919050565b611e8f81611e74565b82525050565b6000602082019050611eaa6000830184611e86565b92915050565b611eb981611e74565b8114611ec457600080fd5b50565b600081359050611ed681611eb0565b92915050565b60008060408385031215611ef357611ef2611c7b565b5b6000611f0185828601611ec7565b9250506020611f1285828601611e12565b9150509250929050565b600080600060608486031215611f3557611f34611c7b565b5b6000611f4386828701611ec7565b9350506020611f5486828701611ec7565b9250506040611f6586828701611e12565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fb182611d8f565b810181811067ffffffffffffffff82111715611fd057611fcf611f79565b5b80604052505050565b6000611fe3611c71565b9050611fef8282611fa8565b919050565b600067ffffffffffffffff82111561200f5761200e611f79565b5b61201882611d8f565b9050602081019050919050565b82818337600083830152505050565b600061204761204284611ff4565b611fd9565b90508281526020810184848401111561206357612062611f74565b5b61206e848285612025565b509392505050565b600082601f83011261208b5761208a611f6f565b5b813561209b848260208601612034565b91505092915050565b6000602082840312156120ba576120b9611c7b565b5b600082013567ffffffffffffffff8111156120d8576120d7611c80565b5b6120e484828501612076565b91505092915050565b60006020828403121561210357612102611c7b565b5b600061211184828501611ec7565b91505092915050565b61212381611d0a565b811461212e57600080fd5b50565b6000813590506121408161211a565b92915050565b6000806040838503121561215d5761215c611c7b565b5b600061216b85828601611ec7565b925050602061217c85828601612131565b9150509250929050565b600067ffffffffffffffff8211156121a1576121a0611f79565b5b6121aa82611d8f565b9050602081019050919050565b60006121ca6121c584612186565b611fd9565b9050828152602081018484840111156121e6576121e5611f74565b5b6121f1848285612025565b509392505050565b600082601f83011261220e5761220d611f6f565b5b813561221e8482602086016121b7565b91505092915050565b6000806000806080858703121561224157612240611c7b565b5b600061224f87828801611ec7565b945050602061226087828801611ec7565b935050604061227187828801611e12565b925050606085013567ffffffffffffffff81111561229257612291611c80565b5b61229e878288016121f9565b91505092959194509250565b600080604083850312156122c1576122c0611c7b565b5b60006122cf85828601611ec7565b92505060206122e085828601611ec7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061233157607f821691505b602082108103612344576123436122ea565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006123a6602183611d4b565b91506123b18261234a565b604082019050919050565b600060208201905081810360008301526123d581612399565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612438603e83611d4b565b9150612443826123dc565b604082019050919050565b600060208201905081810360008301526124678161242b565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006124ca602e83611d4b565b91506124d58261246e565b604082019050919050565b600060208201905081810360008301526124f9816124bd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061253a82611c3d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361256c5761256b612500565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006125ad601883611d4b565b91506125b882612577565b602082019050919050565b600060208201905081810360008301526125dc816125a0565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061263f602983611d4b565b915061264a826125e3565b604082019050919050565b6000602082019050818103600083015261266e81612632565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b60006126d1602f83611d4b565b91506126dc82612675565b604082019050919050565b60006020820190508181036000830152612700816126c4565b9050919050565b600081905092915050565b600061271d82611d40565b6127278185612707565b9350612737818560208601611d5c565b80840191505092915050565b600061274f8285612712565b915061275b8284612712565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127c3602683611d4b565b91506127ce82612767565b604082019050919050565b600060208201905081810360008301526127f2816127b6565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612855602583611d4b565b9150612860826127f9565b604082019050919050565b6000602082019050818103600083015261288481612848565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006128e7602483611d4b565b91506128f28261288b565b604082019050919050565b60006020820190508181036000830152612916816128da565b9050919050565b600061292882611c3d565b915061293383611c3d565b92508282101561294657612945612500565b5b828203905092915050565b600061295c82611c3d565b915061296783611c3d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561299c5761299b612500565b5b828201905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006129dd602083611d4b565b91506129e8826129a7565b602082019050919050565b60006020820190508181036000830152612a0c816129d0565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612a49601c83611d4b565b9150612a5482612a13565b602082019050919050565b60006020820190508181036000830152612a7881612a3c565b9050919050565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612adb602c83611d4b565b9150612ae682612a7f565b604082019050919050565b60006020820190508181036000830152612b0a81612ace565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612b47602083611d4b565b9150612b5282612b11565b602082019050919050565b60006020820190508181036000830152612b7681612b3a565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612bb3601983611d4b565b9150612bbe82612b7d565b602082019050919050565b60006020820190508181036000830152612be281612ba6565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612c45603283611d4b565b9150612c5082612be9565b604082019050919050565b60006020820190508181036000830152612c7481612c38565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612cb582611c3d565b9150612cc083611c3d565b925082612cd057612ccf612c7b565b5b828204905092915050565b6000612ce682611c3d565b9150612cf183611c3d565b925082612d0157612d00612c7b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000612d6282612d3b565b612d6c8185612d46565b9350612d7c818560208601611d5c565b612d8581611d8f565b840191505092915050565b6000608082019050612da56000830187611e86565b612db26020830186611e86565b612dbf6040830185611c47565b8181036060830152612dd18184612d57565b905095945050505050565b600081519050612deb81611cb1565b92915050565b600060208284031215612e0757612e06611c7b565b5b6000612e1584828501612ddc565b9150509291505056fea2646970667358221220544a594e3b5d72478916dc52160b6b8461e88d7f33ea92114b5bf28c0eeb9bef64736f6c634300080e0033a264697066735822122085e16d2e1abbccaec85cb23f544615c246b1aea5c621e92fcfe42eedebd77afa64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638a68b229116100715780638a68b229146101525780638da5cb5b146101705780639679a3c81461018e5780639f71d03c146101be578063d8fb768b146101ee578063f2fde38b1461020c576100a9565b80632ff1f928146100ae5780633958b30f146100cc5780635a9eb289146100e8578063715018a6146101185780638143c1f514610122575b600080fd5b6100b6610228565b6040516100c3919061098c565b60405180910390f35b6100e660048036038101906100e19190610b01565b61024e565b005b61010260048036038101906100fd9190610bb7565b610463565b60405161010f9190610c2e565b60405180910390f35b61012061053d565b005b61013c60048036038101906101379190610c49565b610551565b6040516101499190610c8f565b60405180910390f35b61015a6105fb565b6040516101679190610ccb565b60405180910390f35b610178610621565b6040516101859190610cf5565b60405180910390f35b6101a860048036038101906101a39190610c49565b61064b565b6040516101b59190610cf5565b60405180910390f35b6101d860048036038101906101d39190610c49565b6106fa565b6040516101e59190610cf5565b60405180910390f35b6101f6610738565b6040516102039190610c8f565b60405180910390f35b61022660048036038101906102219190610c49565b61073e565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061025933610551565b14610290576040517f43d73cc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632bb85f6b8484336040518463ffffffff1660e01b81526004016102f193929190610d98565b6060604051808303816000875af1158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610e1e565b509150506005600081548092919061034b90610ea0565b9190505550600060405180602001604052803373ffffffffffffffffffffffffffffffffffffffff16815250905080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5d0de243db1669e3a7056744cd715c625f0c1c348736c2c2d53d0ddebff1a6c760405160405180910390a350505050565b600082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323cbe4d6836040518263ffffffff1660e01b81526004016105019190610ee8565b600060405180830381600087803b15801561051b57600080fd5b505af115801561052f573d6000803e3d6000fd5b505050506001905092915050565b6105456107c1565b61054f600061083f565b565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c284dc0846040518263ffffffff1660e01b81526004016105af9190610cf5565b602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610f0a565b905080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f7fd7ab6000856040518363ffffffff1660e01b81526004016106ac929190610f72565b606060405180830381865afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190610e1e565b5091505080915050919050565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b60055481565b6107466107c1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac9061100d565b60405180910390fd5b6107be8161083f565b50565b6107c9610905565b73ffffffffffffffffffffffffffffffffffffffff166107e7610621565b73ffffffffffffffffffffffffffffffffffffffff161461083d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083490611079565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061095261094d6109488461090d565b61092d565b61090d565b9050919050565b600061096482610937565b9050919050565b600061097682610959565b9050919050565b6109868161096b565b82525050565b60006020820190506109a1600083018461097d565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a0e826109c5565b810181811067ffffffffffffffff82111715610a2d57610a2c6109d6565b5b80604052505050565b6000610a406109a7565b9050610a4c8282610a05565b919050565b600067ffffffffffffffff821115610a6c57610a6b6109d6565b5b610a75826109c5565b9050602081019050919050565b82818337600083830152505050565b6000610aa4610a9f84610a51565b610a36565b905082815260208101848484011115610ac057610abf6109c0565b5b610acb848285610a82565b509392505050565b600082601f830112610ae857610ae76109bb565b5b8135610af8848260208601610a91565b91505092915050565b60008060408385031215610b1857610b176109b1565b5b600083013567ffffffffffffffff811115610b3657610b356109b6565b5b610b4285828601610ad3565b925050602083013567ffffffffffffffff811115610b6357610b626109b6565b5b610b6f85828601610ad3565b9150509250929050565b6000610b848261090d565b9050919050565b610b9481610b79565b8114610b9f57600080fd5b50565b600081359050610bb181610b8b565b92915050565b60008060408385031215610bce57610bcd6109b1565b5b6000610bdc85828601610ba2565b925050602083013567ffffffffffffffff811115610bfd57610bfc6109b6565b5b610c0985828601610ad3565b9150509250929050565b60008115159050919050565b610c2881610c13565b82525050565b6000602082019050610c436000830184610c1f565b92915050565b600060208284031215610c5f57610c5e6109b1565b5b6000610c6d84828501610ba2565b91505092915050565b6000819050919050565b610c8981610c76565b82525050565b6000602082019050610ca46000830184610c80565b92915050565b6000610cb582610959565b9050919050565b610cc581610caa565b82525050565b6000602082019050610ce06000830184610cbc565b92915050565b610cef81610b79565b82525050565b6000602082019050610d0a6000830184610ce6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d4a578082015181840152602081019050610d2f565b83811115610d59576000848401525b50505050565b6000610d6a82610d10565b610d748185610d1b565b9350610d84818560208601610d2c565b610d8d816109c5565b840191505092915050565b60006060820190508181036000830152610db28186610d5f565b90508181036020830152610dc68185610d5f565b9050610dd56040830184610ce6565b949350505050565b600081519050610dec81610b8b565b92915050565b610dfb81610c76565b8114610e0657600080fd5b50565b600081519050610e1881610df2565b92915050565b600080600060608486031215610e3757610e366109b1565b5b6000610e4586828701610ddd565b9350506020610e5686828701610ddd565b9250506040610e6786828701610e09565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eab82610c76565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610edd57610edc610e71565b5b600182019050919050565b60006020820190508181036000830152610f028184610d5f565b905092915050565b600060208284031215610f2057610f1f6109b1565b5b6000610f2e84828501610e09565b91505092915050565b6000819050919050565b6000610f5c610f57610f5284610f37565b61092d565b610c76565b9050919050565b610f6c81610f41565b82525050565b6000604082019050610f876000830185610f63565b610f946020830184610ce6565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ff7602683610d1b565b915061100282610f9b565b604082019050919050565b6000602082019050818103600083015261102681610fea565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611063602083610d1b565b915061106e8261102d565b602082019050919050565b6000602082019050818103600083015261109281611056565b905091905056fea2646970667358221220d1c5c0664618971dab51f792534dcff20c5cc7b513030990ccd10a0906d5717064736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/SignetControllor.sol:SignetControllor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/SignetControllor.sol:SignetControllor",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1848,
        "contract": "contracts/SignetControllor.sol:SignetControllor",
        "label": "sSignetor",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Signetor)2207"
      },
      {
        "astId": 1851,
        "contract": "contracts/SignetControllor.sol:SignetControllor",
        "label": "ST",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Signetors)2393"
      },
      {
        "astId": 1854,
        "contract": "contracts/SignetControllor.sol:SignetControllor",
        "label": "STCrator",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Signetors)2393"
      },
      {
        "astId": 1856,
        "contract": "contracts/SignetControllor.sol:SignetControllor",
        "label": "TotalSignetorsNum",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1864,
        "contract": "contracts/SignetControllor.sol:SignetControllor",
        "label": "collectionContractList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(ownerstruct)1859_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Signetor)2207": {
        "encoding": "inplace",
        "label": "contract Signetor",
        "numberOfBytes": "20"
      },
      "t_contract(Signetors)2393": {
        "encoding": "inplace",
        "label": "contract Signetors",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ownerstruct)1859_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignetControllor.ownerstruct)",
        "numberOfBytes": "32",
        "value": "t_struct(ownerstruct)1859_storage"
      },
      "t_struct(ownerstruct)1859_storage": {
        "encoding": "inplace",
        "label": "struct SignetControllor.ownerstruct",
        "members": [
          {
            "astId": 1858,
            "contract": "contracts/SignetControllor.sol:SignetControllor",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}